generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model episode {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String      @db.VarChar(255)
  podcast_id    String?     @db.Uuid
  individual_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  individual    individual? @relation(fields: [individual_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  podcast       podcast?    @relation(fields: [podcast_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  snippet       snippet[]
}

model individual {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  image       String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  episode     episode[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  playlist    playlist[]
  podcast     podcast[]
  snippet     snippet[]
}

model playlist {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String      @db.VarChar(255)
  individual_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  individual    individual? @relation(fields: [individual_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model podcast {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String      @db.VarChar(255)
  genre         String      @db.VarChar(255)
  host          String      @db.VarChar(255)
  individual_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  episode       episode[]
  individual    individual? @relation(fields: [individual_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model snippet {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content       String      @db.VarChar(255)
  episode_id    String?     @db.Uuid
  individual_id String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  episode       episode?    @relation(fields: [episode_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  individual    individual? @relation(fields: [individual_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String       @unique @db.VarChar(255)
  firstName   String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  roq_user_id String       @db.VarChar(255)
  tenant_id   String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  individual  individual[]
}
